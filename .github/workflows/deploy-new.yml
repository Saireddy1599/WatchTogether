name: Deploy to Cloud Run
on:
  push:
    branches: [ main ]

permissions:
  contents: 'read'
  id-token: 'write'

jobs:
  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}

      - name: Authenticate Docker for GCR
        run: gcloud auth configure-docker --quiet

      - name: Build and Push Container
        run: |
          docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/watchtogether-backend:${{ github.sha }} .
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/watchtogether-backend:${{ github.sha }}

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: watchtogether-backend
          region: ${{ secrets.GCP_REGION }}
          image: gcr.io/${{ secrets.GCP_PROJECT_ID }}/watchtogether-backend:${{ github.sha }}
          env_vars: |
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            CLIENT_API_KEY=${{ secrets.CLIENT_API_KEY }}
            GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}
            VERTEX_MODEL=${{ secrets.VERTEX_MODEL }}
  setup-and-deploy:
    name: Setup and Deploy
    runs-on: ubuntu-latest

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Build application
        run: npm run build

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          version: '>= 363.0.0'

      - name: Firebase Deploy
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          projectId: ${{ env.PROJECT_ID }}
          channelId: live
